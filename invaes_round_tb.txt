library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library LIB_AES;
use LIB_AES.crypt_pack.all;
library LIB_RTL;

entity AESRound_tb is
end AESRound_tb;

architecture AESRound_tb_arch of AESRound_tb is
    component AESRound is
        port (
            clock_i : in std_logic;
            currentkey_i : in bit128;
            enable_mixcolumns_i : in std_logic;
            enable_Roundcomputing_i : in std_logic;
            resetb_i : in std_logic;
            text_i : in bit128;
            data_o : out bit128
        );
    end component;
    signal enable_mixcolumns_s, enable_Roundcomputing_s, resetb_s : std_logic;
    signal clock_s : std_logic := '0';
    signal currentkey_s : bit128 := X"2b7e151628aed2a6abf7158809cf4f3c";
    signal text_s : bit128 := X"526573746f20656e2076696c6c65203f";
    signal data_s : bit128;

begin

    DUT : AESRound
    port map(
        clock_i => clock_s,
        currentkey_i => currentkey_s,
        enable_mixcolumns_i => enable_mixcolumns_s,
        enable_Roundcomputing_i => enable_Roundcomputing_s,
        resetb_i => resetb_s,
        text_i => text_s,
        data_o => data_s
    );
    clock_s <= not(clock_s) after 50 ns;
    enable_mixcolumns_s <= '1';
    enable_Roundcomputing_s <= '0', '1' after 100 ns;
    resetb_s <= '0', '1' after 10 ns;

end architecture; -- arch
